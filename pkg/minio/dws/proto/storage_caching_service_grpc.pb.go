// Code generated by protoc-gen-go-grpc. DO NOT EDIT.
// versions:
// - protoc-gen-go-grpc v1.2.0
// - protoc             v3.21.12
// source: storage_caching_service.proto

package storage_caching_service_pb

import (
	context "context"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
// Requires gRPC-Go v1.32.0 or later.
const _ = grpc.SupportPackageIsVersion7

// StorageCachingServiceClient is the client API for StorageCachingService service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type StorageCachingServiceClient interface {
	GetBucketByAccessKey(ctx context.Context, in *GetBucketByAccessKeyRequest, opts ...grpc.CallOption) (*GetBucketByAccessKeyResponse, error)
}

type storageCachingServiceClient struct {
	cc grpc.ClientConnInterface
}

func NewStorageCachingServiceClient(cc grpc.ClientConnInterface) StorageCachingServiceClient {
	return &storageCachingServiceClient{cc}
}

func (c *storageCachingServiceClient) GetBucketByAccessKey(ctx context.Context, in *GetBucketByAccessKeyRequest, opts ...grpc.CallOption) (*GetBucketByAccessKeyResponse, error) {
	out := new(GetBucketByAccessKeyResponse)
	err := c.cc.Invoke(ctx, "/storage_caching_service.StorageCachingService/GetBucketByAccessKey", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// StorageCachingServiceServer is the server API for StorageCachingService service.
// All implementations must embed UnimplementedStorageCachingServiceServer
// for forward compatibility
type StorageCachingServiceServer interface {
	GetBucketByAccessKey(context.Context, *GetBucketByAccessKeyRequest) (*GetBucketByAccessKeyResponse, error)
	mustEmbedUnimplementedStorageCachingServiceServer()
}

// UnimplementedStorageCachingServiceServer must be embedded to have forward compatible implementations.
type UnimplementedStorageCachingServiceServer struct {
}

func (UnimplementedStorageCachingServiceServer) GetBucketByAccessKey(context.Context, *GetBucketByAccessKeyRequest) (*GetBucketByAccessKeyResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetBucketByAccessKey not implemented")
}
func (UnimplementedStorageCachingServiceServer) mustEmbedUnimplementedStorageCachingServiceServer() {}

// UnsafeStorageCachingServiceServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to StorageCachingServiceServer will
// result in compilation errors.
type UnsafeStorageCachingServiceServer interface {
	mustEmbedUnimplementedStorageCachingServiceServer()
}

func RegisterStorageCachingServiceServer(s grpc.ServiceRegistrar, srv StorageCachingServiceServer) {
	s.RegisterService(&StorageCachingService_ServiceDesc, srv)
}

func _StorageCachingService_GetBucketByAccessKey_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetBucketByAccessKeyRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(StorageCachingServiceServer).GetBucketByAccessKey(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/storage_caching_service.StorageCachingService/GetBucketByAccessKey",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(StorageCachingServiceServer).GetBucketByAccessKey(ctx, req.(*GetBucketByAccessKeyRequest))
	}
	return interceptor(ctx, in, info, handler)
}

// StorageCachingService_ServiceDesc is the grpc.ServiceDesc for StorageCachingService service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var StorageCachingService_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "storage_caching_service.StorageCachingService",
	HandlerType: (*StorageCachingServiceServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "GetBucketByAccessKey",
			Handler:    _StorageCachingService_GetBucketByAccessKey_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "storage_caching_service.proto",
}
